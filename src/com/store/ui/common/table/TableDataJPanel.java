/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.store.ui.common.table;

import com.store.data.Data;
import com.store.data.DataDao;
import com.store.data.DataField;
import com.store.data.common.DateField;
import com.store.ui.ITabComponent;
import com.store.util.StringUtil;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JTextArea;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;

/**
 *
 * @author chenjingjun
 * @param <T>
 */
public abstract class TableDataJPanel<T extends Data> extends javax.swing.JPanel  implements ITabComponent, TableTextComboBox.ITableTextUpdate{

    private MouseListener mouseListener;
    private final TableEditModel<T> tableModel;
    /**
     * Creates new form VenderJPanel
     */
    public TableDataJPanel(TableEditModel<T> model) {
        this.tableModel = model;
        this.tableModel.setPanel(this);
    }
    
    @Override
    public void initUI(boolean realod) {
        if (realod) {
            getDataCatalog().reload();
        }
        //调整宽度
        List<DataField> fields = getDataCatalog().getDataDetail().getAuthoFileds();
        for(int i = 0; i < fields.size(); i++){
            TableColumn column = getJTable().getColumnModel().getColumn(i);
            if (fields.get(i) instanceof DateField) {
                column.setPreferredWidth(170);
            }
//            else if (fields.get(i).UIName.contains("ID")) {
//               column.setPreferredWidth(50);
//            }
        }
    }
    
     @Override
    public void initOne() {
        initJTableComponent();
        initTextComboBoxComponent();
    }
   
    @Override
    public void update(String value) {
        T data = getDataCatalog().get(value);
        int row = getJTable().getRow(data);
        selectJTableRow(row);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(700, 500));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
    }// </editor-fold>                        

    
    protected void initJTableComponent(){
        getJTable().setEditModel(tableModel);
        dataClickListener();
        getJTable().setSelectionBackground(new Color(204, 226, 229));
        getJTable().setSelectionForeground(new Color(0, 0, 255));
    }
    
    private void initTextComboBoxComponent(){
         TableTextComboBox textComboBox = getSearchTextComboBox();
         if(textComboBox != null){
            textComboBox.register(this);
         }
    }
    
    protected void resetTextComboBox(List<T> currentDataList){
         TableTextComboBox textComboBox = getSearchTextComboBox();
         if(textComboBox != null){
            List<String> nameList = new ArrayList<>();
            for(T data : currentDataList){
                nameList.add(data.getName());
            }
            textComboBox.changeItems(nameList.toArray());
//            textComboBox.updateUI();
         }
    }
    
    protected void resetJTableUIData(List<T> currentDataList, boolean defaultSort){
        if(defaultSort){
            getDataCatalog().sort(currentDataList);
        }
        getJTable().updateDataList(currentDataList);
        resetTextComboBox(currentDataList);
        updateJTextArea("", "");
        updateTableUI(true);
    }
    
     protected void updateTableUI(boolean update){
        if(update){
           getJTable().updateUI();
        }
        getJTable().setShowGrid(true);
    }
    
    protected void updateJTextArea(String title, String message, Object... objects){
       JTextArea textArea = getJTextArea();
       if(textArea != null){
           StringBuilder builder = new StringBuilder();
           builder.append(String.format("【总共有%d行数据】\n", getJTable().getDataList().size()));
           if (!StringUtil.isNullOrEmpty(title)) {
                builder.append(String.format("【打印信息说明：%s，详情如下】\n", title));
           }
           if (!StringUtil.isNullOrEmpty(message)) {
                builder.append(String.format(message, objects));
           }
           textArea.setText(builder.toString());
           textArea.setCaretPosition(0);
       }
    }

    protected void onClickJTable(int row, int column, Object value){
        updateJTextArea(value.toString(), "");
    }

    protected TableEditModel<T> getJTableModel(){
        return tableModel;
    }
    
    protected void selectJTableRow(int index){
        if(index < 0 || index >= getJTable().getRowCount()){
            return;
        }
        getJTable().changeSelection(index, 1, false, false);
    }
    
    public abstract JEditTable<T> getJTable();
 
    protected abstract JTextArea getJTextArea();

    public MouseListener getJTableMouseListener() {
        return mouseListener;
    }
    
    private void dataClickListener(){
        mouseListener = new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = getJTable().getSelectedRow();
                int column = getJTable().getSelectedColumn();
                if(row == -1 || column == -1){
                    return;
                }
                Object value = getJTableModel().getValueAt(row, column);
                if(value != null){
                    onClickJTable(row, column, value);
                }
            }
        };
        getJTable().addMouseListener(mouseListener);
    }
    
    protected TableTextComboBox getSearchTextComboBox(){
        return null;
    }
    
    protected abstract DataDao<T> getDataCatalog();
    
    // Variables declaration - do not modify                     
    // End of variables declaration                   
}
